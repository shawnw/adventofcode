#!/usr/local/bin/csi -s
(import (chicken format)
        (srfi 1))
(declare (fixnum-arithmetic) (block))

(define (vector-grow-and-set! vec i val)
  (if (< i (vector-length vec))
      (begin
        (vector-set! vec i val)
        vec)
      (let ((newvec (vector-resize vec (max (* (vector-length vec) 2) (+ i 1)) #f)))
        (vector-set! newvec i val)
        newvec)))

(define (solve numbers last-turn)
  (let* ((history (make-vector 10000000 #f))
         (turn (fold (lambda (num turn)
                       (vector-set! history num turn)
                       (+ turn 1)) 1 (drop-right numbers 1))))
    (let loop ((turn turn)
               (num (last numbers))
               (history history))
      (cond
       ((= turn last-turn) num)
       ((and (< num (vector-length history))
             (vector-ref history num)) =>
             (lambda (last-said)
               (loop (+ turn 1)
                     (- turn last-said)
                     (vector-grow-and-set! history num turn))))
       (else
        (loop (+ turn 1) 0 (vector-grow-and-set! history num turn)))))))

(define (test inputs last-turn)
  (let loop ((inputs inputs))
    (unless (null? inputs)
            (let*  ((input (caar inputs))
                    (expected (cdar inputs))
                    (result (solve input last-turn)))
              (if (= expected result)
                  (printf "~S => ~A PASS~%" input result)
                  (printf "~S => ~A but got ~A FAIL~%" input expected result)))
            (loop (cdr inputs)))))

(define (test1)
  (test '(((0 3 6) . 436)
          ((1 3 2) . 1)
          ((2 1 3) . 10)
          ((1 2 3) . 27)
          ((2 3 1) . 78)
          ((3 2 1) . 438)
          ((3 1 2) . 1836))
        2020))

(define (test2)
  (test '(((0 3 6) . 175594)
          ((1 3 2) . 2578)
          ((2 1 3) . 3544142)
          ((1 2 3) . 261214)
          ((2 3 1) . 6895259)
          ((3 2 1) . 18)
          ((3 1 2) . 362))
        30000000))

;;;(test1)
;;; Slow!
;;;(test2)
(define input '(0 14 6 20 1 4))
(printf "Part 1: ~A~%" (solve input 2020))
(printf "Part 2: ~A~%" (solve input 30000000))
