(define-library (knot-hash)
  (import
   (kawa base)
   (srfi 1)
   (srfi 133)
   (only (data-structures)
         chop))
  (export knot-hash)
  (begin
    (define (knot-hash str)
      (let* ((strlist (map char->integer (string->list str)))
             (numbers (list->vector (iota 256)))
             (lengths (append strlist '(17 31 73 47 23)))
             (pos 0)
             (skip 0)
             (maxlen (vector-length numbers))
             (modadd (lambda args (remainder (apply + args) maxlen)))
             (moddecr (lambda (a) (if (= a 0) (- maxlen 1) (- a 1))))
             (reverse-section!
              (lambda (len)
                (let ((start pos)
                      (end (moddecr (modadd pos len)))
                      (endsteps (quotient len 2)))
                  (do ((i start (modadd i 1))
                       (j end (moddecr j))
                       (steps 0 (+ steps 1)))
                      ((= steps endsteps))
                    (vector-swap! numbers i j))
                  (set! pos (modadd pos len skip))
                  (set! skip (+ skip 1))))))
        (do ((i 0 (+ i 1)))
            ((= i 64))
      (for-each reverse-section! lengths))
        (let* ((blocks (chop (vector->list numbers) 16))
               (dense (map (cut reduce bitwise-xor #f <>) blocks)))
          (string-concatenate (map (cut format "~2,'0X" <>) dense)))))))
